/*
 * Livro.API
 *
 * API criada para trabalho da disciplina Arquitetura de Backend e Microsserviços do curso de pós graduação em Arquitetura de Software Distribuído PUC Minas.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: diogoaguilar89@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using Livro.API.Models;

namespace Livro.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class AutoresApiController : Controller
    { 

        /// <summary>
        /// Adicionar novo autor
        /// </summary>
        /// <remarks>Adicionar novo autor</remarks>
        /// <param name="autorItem">Autor para adicionar</param>
        /// <response code="201">item criado</response>
        /// <response code="400">objeto inválido</response>
        /// <response code="409">item existente</response>
        [HttpPost]
        [Route("/DiogoAguilar/LivroAPI/1.0.0/autores")]
        [SwaggerOperation("AdicionarAutor")]
        public virtual void AdicionarAutor([FromBody]Autor autorItem)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Atualiza um autor
        /// </summary>
        /// <remarks>Atualiza um autor de acordo com o código informado</remarks>
        /// <param name="id">Código do autor</param>
        /// <param name="autorItem">Autor para atualizar</param>
        /// <response code="200">Sucesso</response>
        [HttpPut]
        [Route("/DiogoAguilar/LivroAPI/1.0.0/autores/{id}")]
        [SwaggerOperation("AtualizarAutor")]
        public virtual void AtualizarAutor([FromRoute]string id, [FromBody]Autor autorItem)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Obtém autor por código
        /// </summary>
        /// <remarks>Retorna autor de acordo com o código informado</remarks>
        /// <param name="id">Código do autor</param>
        /// <response code="200">Sucesso</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/DiogoAguilar/LivroAPI/1.0.0/autores/{id}")]
        [SwaggerOperation("ObterAutor")]
        [SwaggerResponse(200, type: typeof(Autor))]
        public virtual IActionResult ObterAutor([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Autor>(exampleJson)
            : default(Autor);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Listar todos os autores
        /// </summary>
        /// <remarks>Retorna todos os autores cadastrados</remarks>
        /// <response code="200">Sucesso</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/DiogoAguilar/LivroAPI/1.0.0/autores")]
        [SwaggerOperation("ObterAutores")]
        [SwaggerResponse(200, type: typeof(List<Autor>))]
        public virtual IActionResult ObterAutores()
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Autor>>(exampleJson)
            : default(List<Autor>);
            return new ObjectResult(example);
        }
    }
}
