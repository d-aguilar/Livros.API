/*
 * Livro.API
 *
 * API criada para trabalho da disciplina Arquitetura de Backend e Microsserviços do curso de pós graduação em Arquitetura de Software Distribuído PUC Minas.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: diogoaguilar89@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using Livro.API.Models;

namespace Livro.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class LivrosApiController : Controller
    { 

        /// <summary>
        /// Adiciona novo livro
        /// </summary>
        /// <remarks>Adiciona um novo livro</remarks>
        /// <param name="livroItem">Livro para adicionar</param>
        /// <response code="201">item criado</response>
        /// <response code="400">objeto inválido</response>
        /// <response code="409">item existente</response>
        [HttpPost]
        [Route("/DiogoAguilar/LivroAPI/1.0.0/livros")]
        [SwaggerOperation("AdicionarLivro")]
        public virtual void AdicionarLivro([FromBody]API.Models.Livro livroItem)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Atualiza um livro
        /// </summary>
        /// <remarks>Atualiza um livro de acordo com o código informado</remarks>
        /// <param name="id">Código do livro</param>
        /// <param name="livroItem">Livro para atualizar</param>
        /// <response code="201">item criado</response>
        /// <response code="400">invalid input, object invalid</response>
        /// <response code="409">an existing item already exists</response>
        [HttpPut]
        [Route("/DiogoAguilar/LivroAPI/1.0.0/livros/{id}")]
        [SwaggerOperation("AtualizarLivro")]
        public virtual void AtualizarLivro([FromRoute]string id, [FromBody]Comentario livroItem)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Deletar livro por código
        /// </summary>
        /// <remarks>Remove livro de acordo com o código informado</remarks>
        /// <param name="id">Código do livro</param>
        /// <response code="200">Sucesso</response>
        /// <response code="400">bad input parameter</response>
        [HttpDelete]
        [Route("/DiogoAguilar/LivroAPI/1.0.0/livros/{id}")]
        [SwaggerOperation("DeletarLivro")]
        [SwaggerResponse(200, type: typeof(API.Models.Livro))]
        public virtual IActionResult DeletarLivro([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<API.Models.Livro>(exampleJson)
            : default(API.Models.Livro);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Obtém livro por ISBN
        /// </summary>
        /// <remarks>Retorna livro de acordo com o código ISBN</remarks>
        /// <param name="isbn">description</param>
        /// <response code="200">Sucesso</response>
        [HttpGet]
        [Route("/DiogoAguilar/LivroAPI/1.0.0/livros/obterPorIsbn/{isbn}")]
        [SwaggerOperation("LivrosObterPorIsbnIsbnGet")]
        [SwaggerResponse(200, type: typeof(API.Models.Livro))]
        public virtual IActionResult LivrosObterPorIsbnIsbnGet([FromRoute]string isbn)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<API.Models.Livro>(exampleJson)
            : default(API.Models.Livro);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Obtém livro por código
        /// </summary>
        /// <remarks>Retorna livros de acordo com o código informado</remarks>
        /// <param name="id">Código do livro</param>
        /// <response code="200">Sucesso</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/DiogoAguilar/LivroAPI/1.0.0/livros/{id}")]
        [SwaggerOperation("ObterLivro")]
        [SwaggerResponse(200, type: typeof(API.Models.Livro))]
        public virtual IActionResult ObterLivro([FromRoute]string id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<API.Models.Livro>(exampleJson)
            : default(API.Models.Livro);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Listar livros por nome do autor
        /// </summary>
        /// <remarks>Retorna livros de acordo com o nome do autor informado</remarks>
        /// <param name="nomeAutor">Nome do Autor</param>
        /// <response code="200">Sucesso</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/DiogoAguilar/LivroAPI/1.0.0/livros/obterPorAutor/{nomeAutor}")]
        [SwaggerOperation("ObterLivroPorAutor")]
        [SwaggerResponse(200, type: typeof(List<API.Models.Livro>))]
        public virtual IActionResult ObterLivroPorAutor([FromRoute]string nomeAutor)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<API.Models.Livro>>(exampleJson)
            : default(List<API.Models.Livro>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Listar livros por palavras chave
        /// </summary>
        /// <remarks>Retorna livros de acordo com o título informado</remarks>
        /// <param name="palavrasChave">Palavras chaves</param>
        /// <response code="200">Sucesso</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/DiogoAguilar/LivroAPI/1.0.0/livros/obterPorPalavraChave/")]
        [SwaggerOperation("ObterLivrosPorPalavrasChave")]
        [SwaggerResponse(200, type: typeof(List<API.Models.Livro>))]
        public virtual IActionResult ObterLivrosPorPalavrasChave([FromForm]List<string> palavrasChave)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<API.Models.Livro>>(exampleJson)
            : default(List<API.Models.Livro>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Listar livros por título
        /// </summary>
        /// <remarks>Retorna livros de acordo com o título informado</remarks>
        /// <param name="titulo">Título do livro</param>
        /// <response code="200">Sucesso</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/DiogoAguilar/LivroAPI/1.0.0/livros/obterPorTitulo/{titulo}")]
        [SwaggerOperation("ObterLivrosPorTitulo")]
        [SwaggerResponse(200, type: typeof(List<API.Models.Livro>))]
        public virtual IActionResult ObterLivrosPorTitulo([FromRoute]string titulo)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<API.Models.Livro>>(exampleJson)
            : default(List<API.Models.Livro>);
            return new ObjectResult(example);
        }


        /// <summary>
        /// Listar todos os livros
        /// </summary>
        /// <remarks>Retorna todos os livros cadastrados</remarks>
        /// <response code="200">Sucesso</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/DiogoAguilar/LivroAPI/1.0.0/livros")]
        [SwaggerOperation("ObterTodosLivros")]
        [SwaggerResponse(200, type: typeof(List<API.Models.Livro>))]
        public virtual IActionResult ObterTodosLivros()
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<API.Models.Livro>>(exampleJson)
            : default(List<API.Models.Livro>);
            return new ObjectResult(example);
        }
    }
}
