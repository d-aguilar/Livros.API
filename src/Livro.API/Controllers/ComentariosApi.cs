/*
 * Livro.API
 *
 * API criada para trabalho da disciplina Arquitetura de Backend e Microsserviços do curso de pós graduação em Arquitetura de Software Distribuído PUC Minas.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: diogoaguilar89@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using Swashbuckle.SwaggerGen.Annotations;
using Livro.API.Models;

namespace Livro.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ComentariosApiController : Controller
    { 

        /// <summary>
        /// Adiciona novo comentário
        /// </summary>
        /// <remarks>Adiciona um novo comentário</remarks>
        /// <param name="comentarioItem">Comentário para adicionar</param>
        /// <response code="201">item criado</response>
        /// <response code="400">objeto inválido</response>
        /// <response code="409">item existente</response>
        [HttpPost]
        [Route("/DiogoAguilar/LivroAPI/1.0.0/comentarios")]
        [SwaggerOperation("AdicionarComentario")]
        public virtual void AdicionarComentario([FromBody]Comentario comentarioItem)
        { 
            throw new NotImplementedException();
        }


        /// <summary>
        /// Obtém comentários por código do livro
        /// </summary>
        /// <remarks>Retorna comentários de acordo com o livro</remarks>
        /// <param name="idLivro">Código do livro</param>
        /// <response code="200">Sucesso</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/DiogoAguilar/LivroAPI/1.0.0/comentarios/{idLivro}")]
        [SwaggerOperation("ObterComentarios")]
        [SwaggerResponse(200, type: typeof(List<API.Models.Livro>))]
        public virtual IActionResult ObterComentarios([FromRoute]string idLivro)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<API.Models.Livro>>(exampleJson)
            : default(List<API.Models.Livro>);
            return new ObjectResult(example);
        }
    }
}
