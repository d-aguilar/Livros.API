/*
 * Livro.API
 *
 * API criada para trabalho da disciplina Arquitetura de Backend e Microsserviços do curso de pós graduação em Arquitetura de Software Distribuído PUC Minas.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: diogoaguilar89@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Livro.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Comentario :  IEquatable<Comentario>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Comentario" /> class.
        /// </summary>
        /// <param name="Nome">Nome (required).</param>
        /// <param name="_Comentario">_Comentario (required).</param>
        /// <param name="Data">Data (required).</param>
        public Comentario(string Nome = null, string _Comentario = null, string Data = null)
        {
            // to ensure "Nome" is required (not null)
            if (Nome == null)
            {
                throw new InvalidDataException("Nome is a required property for Comentario and cannot be null");
            }
            else
            {
                this.Nome = Nome;
            }
            // to ensure "_Comentario" is required (not null)
            if (_Comentario == null)
            {
                throw new InvalidDataException("_Comentario is a required property for Comentario and cannot be null");
            }
            else
            {
                this._Comentario = _Comentario;
            }
            // to ensure "Data" is required (not null)
            if (Data == null)
            {
                throw new InvalidDataException("Data is a required property for Comentario and cannot be null");
            }
            else
            {
                this.Data = Data;
            }
            
        }

        /// <summary>
        /// Gets or Sets Nome
        /// </summary>
        [DataMember(Name="nome")]
        public string Nome { get; set; }

        /// <summary>
        /// Gets or Sets _Comentario
        /// </summary>
        [DataMember(Name="comentario")]
        public string _Comentario { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data")]
        public string Data { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Comentario {\n");
            sb.Append("  Nome: ").Append(Nome).Append("\n");
            sb.Append("  _Comentario: ").Append(_Comentario).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Comentario)obj);
        }

        /// <summary>
        /// Returns true if Comentario instances are equal
        /// </summary>
        /// <param name="other">Instance of Comentario to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Comentario other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Nome == other.Nome ||
                    this.Nome != null &&
                    this.Nome.Equals(other.Nome)
                ) && 
                (
                    this._Comentario == other._Comentario ||
                    this._Comentario != null &&
                    this._Comentario.Equals(other._Comentario)
                ) && 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.Equals(other.Data)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Nome != null)
                    hash = hash * 59 + this.Nome.GetHashCode();
                if (this._Comentario != null)
                    hash = hash * 59 + this._Comentario.GetHashCode();
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Comentario left, Comentario right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Comentario left, Comentario right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
