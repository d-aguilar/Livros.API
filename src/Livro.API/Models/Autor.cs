/*
 * Livro.API
 *
 * API criada para trabalho da disciplina Arquitetura de Backend e Microsserviços do curso de pós graduação em Arquitetura de Software Distribuído PUC Minas.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: diogoaguilar89@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Livro.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Autor :  IEquatable<Autor>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Autor" /> class.
        /// </summary>
        /// <param name="CodAutor">CodAutor.</param>
        /// <param name="Nome">Nome (required).</param>
        /// <param name="HomePage">HomePage.</param>
        public Autor(Guid? CodAutor = null, string Nome = null, string HomePage = null)
        {
            // to ensure "Nome" is required (not null)
            if (Nome == null)
            {
                throw new InvalidDataException("Nome is a required property for Autor and cannot be null");
            }
            else
            {
                this.Nome = Nome;
            }
            this.CodAutor = CodAutor;
            this.HomePage = HomePage;
            
        }

        /// <summary>
        /// Gets or Sets CodAutor
        /// </summary>
        [DataMember(Name="codAutor")]
        public Guid? CodAutor { get; set; }

        /// <summary>
        /// Gets or Sets Nome
        /// </summary>
        [DataMember(Name="nome")]
        public string Nome { get; set; }

        /// <summary>
        /// Gets or Sets HomePage
        /// </summary>
        [DataMember(Name="homePage")]
        public string HomePage { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Autor {\n");
            sb.Append("  CodAutor: ").Append(CodAutor).Append("\n");
            sb.Append("  Nome: ").Append(Nome).Append("\n");
            sb.Append("  HomePage: ").Append(HomePage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((Autor)obj);
        }

        /// <summary>
        /// Returns true if Autor instances are equal
        /// </summary>
        /// <param name="other">Instance of Autor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Autor other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.CodAutor == other.CodAutor ||
                    this.CodAutor != null &&
                    this.CodAutor.Equals(other.CodAutor)
                ) && 
                (
                    this.Nome == other.Nome ||
                    this.Nome != null &&
                    this.Nome.Equals(other.Nome)
                ) && 
                (
                    this.HomePage == other.HomePage ||
                    this.HomePage != null &&
                    this.HomePage.Equals(other.HomePage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CodAutor != null)
                    hash = hash * 59 + this.CodAutor.GetHashCode();
                if (this.Nome != null)
                    hash = hash * 59 + this.Nome.GetHashCode();
                if (this.HomePage != null)
                    hash = hash * 59 + this.HomePage.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(Autor left, Autor right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Autor left, Autor right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
